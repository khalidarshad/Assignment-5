I began the process of identifying a bug in my own code by running some of the tests I had written in previous assignments. 
	I started with testdominion.c, but found that there were actually no errors in my dominion.c gameplay. This was discovered by "grep"-ing for error messages in gameResults.out and testdominion.out (all of my asserts/checks for return values in testdominion.c printed a message with "error" in it). Although this suprised me, after going through my testdominion.c code I realized that I really only checked that the game was able to play correctly and that none of the functions returned -1 - the logic of playing cards, determining a winner, ending a turn or the game, etc. was not tested.
	I moved on to my unit and card tests from Assignment 2. I found errors in my logic for the initializeGame tester: the Great Hall card is a victory card, so its supply count depends on how many players there are. I thought it was a kingdom card and therefore had the same supply every time. Furthermore, I found that I was not including the Great Hall card in my kingdom card array; of course it wouldn't have the correct amount when the game was initialized as it would have a supply of 0. Fixing these logic errors and running the tester showed no bugs in my dominion.c implementation. However, looking back at all of the testers (not just the one for initializeGame), I found that they were really not good unit tests and I probably could have modified at least a few of them to be better. I decided to document this discovery and come back to my unit and card tests later, possibly in order to fix them and find bugs as a result if needed.
	I then tested dominion.c with the randomtestadventurer and randomtestcard tests from Assignment 3. While the Adventurer card passed unit tests, my Great Hall tester showed that the discard count was not changing as it should when this card was played. On average, 800 out of 1000 times the discardCount before and after Great Hall was played were equal. The expected result was an increment in the current plyer's discard count in accordance with dominion rules. 

Once I had identified the problem that existed in my code, I used the GDB debugger and Agans' principles to find the bug.
	One of Agans' principles that I applied to the process was "Divide and Conquer." Using GDB, I placed breakpoints at my r_great_hall, drawCard, and discardCard functions in dominion.c. This allowed me to narrow down the source of the problem: by checking the state->discardCount[currentPlayer] variable value at each of these points, I could trace the source of the fault. What I found was that the discard count had the correct value before discardCard, but after that function call the variable didn't change. 
	During the process of identifying the source of this error, I applied Agans' "Quit Thinking and Look" rule. At the very start of trying to find the bug, I first just tried changing some of the if statements and random variables in my tester (to no avail). Had I simply looked at the source code, I could have easily seen that the discardCount variable wasn't being updated.

To fix this bug, I made changes I thought would help solve the problem and ran tests again to see if they passed.
	In the dominion.c discardCard function, I incremented the current player's discardCount (state->discardCount[currentPlayer]++) after a card was taken from their hand. Running randomtestcard again with these changes gave me fewer errors, but it still failed about 500 out of 1000 times. At this stage, I applied Agan's principle of "If You Didn't Fix It, It Ain't Fixed" as my "fix" to discardCard actually created a new bug: after running GDB again and checking the discardCount variable, I found that I wasn't accounting for the discard count being reset when the deck was empty. This functionality changes the discard count from whatever it was before to 0, then to 1 once the card is discarded. TAs this was just an error in my tester and not the program, I quickly fixed it by checking for a discard count of 1 in my tester's error message if statement. This left me with no errors and, finally, a fixed bug.

Debugger used: GDB
Files/logs discussed: dominion.c randomtestcard.c 
